# Mapa de registos
# n: $a0 -> $s0
# b: $a1 -> $s1
# s: $a2 -> $s2
# p: $s3
# digit: $t0
# Sub-rotina intermédia

# Mapa de registos
# str: $s0
# val: $s1
# O main é, neste caso, uma sub-rotina intermédia
 	.data
str:    .space 33
	.eqv STR_MAX_SIZE,33
 	.eqv read_int,5
 	.eqv print_string,1
 	.text
 	.globl main
 	
main: subu $sp,$sp, 12 # reserva espaço na stack
 	sw $s0, 0($sp)
 	sw $s1, 4($sp) # guarda registos $sx na stack
 	sw $ra, 8($sp) # guarda $ra na stack
 	la $s0, str
do: # do {
 	li $v0,read_int
 	syscall #
 	move $s1,$v0 # val = read_int()
 	
	move $a0, $s1
	li $a1,2
	move $a2, $s0
	jal itoa
	move $a0, $v0
	li $v0, print_string
	syscall
	
	move $a0, $s1
	li $a1,8
	move $a2, $s0
	jal itoa
	move $a0, $v0
	li $v0, print_string
	syscall
	
	move $a0, $s1
	li $a1,16
	move $a2, $s0
	jal itoa
	move $a0, $v0
	li $v0, print_string
	syscall
	
 	beq  $s1, 0, while # } while(val != 0)
 	j do
 while: li $v0, 0 # return 0;
	lw $s0, 0($sp)
 	lw $s1, 4($sp)
 	lw $ra, 8($sp) # repoe registos $sx
 	addu $sp,$sp,12 # liberta espaço na st

#----------------------------------------------------------------------------------------------------
itoa: subu $sp,$sp, 20 # reserva espaço na stack
	sw $s0,0($sp) # guarda registos $sx e $ra
 	sw $s1, 4($sp)
 	sw $s2, 8($sp)
 	sw $s3, 12($sp)
 	sw $ra, 16($sp)
 	move $s0, $a0
 	move $s1, $a1
 	move $s2, $a2 # copia n, b e s para registos
 	move $s3,$a2 # p = s;
do2: # do {
	rem $t0, $s0, $s1
	div $s0, $s0, $s1 
	move $a0, $t0
	jal toascci
	sb $v0, 0($s3)
 	addiu $s3, $s3, 1
 	ble  $s0,0, while3 # } while(n > 0
 	j do2
 
 while3:
 	sb $0,0($s3) # *p = 0;
 	move $a0, $s2
 	jal strrev # strrev( s );
 	move $v0, $s2
	lw $s0,0($sp) # guarda registos $sx e $ra
 	lw $s1, 4($sp)
 	lw $s2, 8($sp)
 	lw $s3, 12($sp)
 	lw $ra, 16($sp)
 	addu $sp,$sp, 20 # liberta espaço na stack
 	jr $ra # 
 	
 #-----------------------------------------------------------------------------------------
strrev: subu $sp,$sp,16
 	sw $ra,0($sp)
 	sw $s0,4($sp)
 	sw $s1,8($sp)
 	sw $s2,12($sp)
 	move $s0,$a0 # registo "callee-saved"
 	move $s1,$a0 # p1 = str
 	move $s2,$a0 # p2 = str
while1: # while( *p2 != '\0' ) {
	lb $t0, 0($s2)
	beq $t0, '\0', endw1
 	addiu $s2, $s2,1 # p2++;
 	j while1 # }
endw1:  subiu $s2, $s2, 1 # p2--;
while2: # while(p1 < p2) {
	bge $s1,$s2,endw2
 	move $a0, $s1	 #
 	move $a1, $s2 #
 	jal exchange # exchange(p1,p2)
 	addiu $s1, $s1,1 
 	subiu $s2, $s2, 1
 	j while2 # }
 endw2: move $v0,$s0 # return str
 	lw $ra,0($sp) #
 	lw $s0, 4($sp) #
	lw $s1, 8($sp)
 	lw $s2, 12($sp) #
	addu $sp, $sp, 16 #
 	jr $ra # termina a sub-rotina 

 #----------------------------------------------------------------------------------------------------------------- 
 exchange:	lb $t0,0($a0)
 		lb $t1, 0($a1)
 		sb $t0,0($a1) 
 		sb $t1,0($a0)
 		jr $ra
#----------------------------------------------------------------------------------------------------------------------------- 	
toascci:
	addi $v0, $a0, '0'
if: ble $v0, '9', eif
	addi $v0, $v0, 7
eif: jr $ra 
#----------------------------------------------------------------------------------------------------------------------------